import socket, threadingBUFFER_SIZE = 1024LOCAL_HOST = "127.0.0.1"PORT_TO_SERVER = 2510class Client(object):    """This class defines client's methods and params"""    def __init__(self, user_name: str):        """        This method initiate client object with those params:        @param user_name: the user name of the client :str        """        self.user_name = user_name        self.client_socket = socket.socket()        self.want_to_exit = False    def receive_data_from_client(self):        """ Getting from client message and printing him after decoding the data """        data = self.client_socket.recv(BUFFER_SIZE).decode()        print(data)    def send_data_to_room(self):        """ The method sends message to the room from the client, after encoding and converting to bytes """        msg = input()        named_message_to_send = "{0}: {1}".format(self.user_name, msg)        if msg == "Exit":            self.want_to_exit = True        self.client_socket.send(bytes(named_message_to_send.encode()))    def login(self):        """ Login client to room """        self.client_socket.connect((LOCAL_HOST, PORT_TO_SERVER))        self.client_socket.send(bytes(self.user_name.encode()))        choice = input(self.client_socket.recv(BUFFER_SIZE).decode())        self.client_socket.send(bytes(choice.encode()))        if choice == "1" or choice == "2":            if choice == "1":                room_id = input(self.client_socket.recv(BUFFER_SIZE).decode())                self.client_socket.send(bytes(room_id.encode()))                print(self.client_socket.recv(BUFFER_SIZE).decode())            elif choice == "2":                print(self.client_socket.recv(BUFFER_SIZE).decode())                chosen_room = input("To which room you would like to enter?")                self.client_socket.send(bytes(chosen_room.encode()))                print(self.client_socket.recv(BUFFER_SIZE).decode())            send_thread = threading.Thread(target=self.send_data_to_room())            receive_thread = threading.Thread(target=self.receive_data_from_client())            while not self.want_to_exit:                receive_thread.start()                send_thread.start()        else:            print("Value error! {} isn't in the options".format(choice))            exit()def main():    """    main() -> NoneType    Control the flow of the program    """    client_name = input("Hello,\nWhat is your name?")    client_instance = Client(client_name)    client_instance.login()if __name__ == '__main__':    main()